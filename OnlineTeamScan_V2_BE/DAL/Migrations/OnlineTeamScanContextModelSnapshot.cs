// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(OnlineTeamScanContext))]
    partial class OnlineTeamScanContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL.Models.Dysfunction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id")
                        .IsClustered();

                    b.ToTable("tbl_dysfunctions");

                    b.HasData(
                        new
                        {
                            Id = 1
                        },
                        new
                        {
                            Id = 2
                        },
                        new
                        {
                            Id = 3
                        },
                        new
                        {
                            Id = 4
                        },
                        new
                        {
                            Id = 5
                        });
                });

            modelBuilder.Entity("DAL.Models.DysfunctionTranslation", b =>
                {
                    b.Property<int>("DysfunctionId")
                        .HasColumnType("int")
                        .HasColumnName("dysfunction_id");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("language_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("DysfunctionId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("tbl_dysfunction_translations");

                    b.HasData(
                        new
                        {
                            DysfunctionId = 1,
                            LanguageId = 1,
                            Name = "Vertrouwen"
                        },
                        new
                        {
                            DysfunctionId = 2,
                            LanguageId = 1,
                            Name = "Conflict"
                        },
                        new
                        {
                            DysfunctionId = 3,
                            LanguageId = 1,
                            Name = "Commitment"
                        },
                        new
                        {
                            DysfunctionId = 4,
                            LanguageId = 1,
                            Name = "Aanspreekbaarheid"
                        },
                        new
                        {
                            DysfunctionId = 5,
                            LanguageId = 1,
                            Name = "Resultaat"
                        },
                        new
                        {
                            DysfunctionId = 1,
                            LanguageId = 2,
                            Name = "Trust"
                        },
                        new
                        {
                            DysfunctionId = 2,
                            LanguageId = 2,
                            Name = "Conflict"
                        },
                        new
                        {
                            DysfunctionId = 3,
                            LanguageId = 2,
                            Name = "Commitment"
                        },
                        new
                        {
                            DysfunctionId = 4,
                            LanguageId = 2,
                            Name = "Accountability"
                        },
                        new
                        {
                            DysfunctionId = 5,
                            LanguageId = 2,
                            Name = "Results"
                        });
                });

            modelBuilder.Entity("DAL.Models.IndividualScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("ScoreAccountability")
                        .HasColumnType("decimal(3,2)")
                        .HasColumnName("score_accountability");

                    b.Property<decimal>("ScoreCommitment")
                        .HasColumnType("decimal(3,2)")
                        .HasColumnName("score_commitment");

                    b.Property<decimal>("ScoreConflict")
                        .HasColumnType("decimal(3,2)")
                        .HasColumnName("score_conflict");

                    b.Property<decimal>("ScoreResults")
                        .HasColumnType("decimal(3,2)")
                        .HasColumnName("score_results");

                    b.Property<decimal>("ScoreTrust")
                        .HasColumnType("decimal(3,2)")
                        .HasColumnName("score_trust");

                    b.Property<int>("TeamMemberId")
                        .HasColumnType("int")
                        .HasColumnName("teammember_id");

                    b.Property<int>("TeamscanId")
                        .HasColumnType("int")
                        .HasColumnName("teamscan_id");

                    b.HasKey("Id")
                        .IsClustered();

                    b.HasIndex("TeamscanId");

                    b.HasIndex("TeamMemberId", "TeamscanId")
                        .IsUnique();

                    b.ToTable("tbl_individualscores");
                });

            modelBuilder.Entity("DAL.Models.Interpretation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DysfunctionId")
                        .HasColumnType("int")
                        .HasColumnName("dysfunction_id");

                    b.Property<int>("LevelId")
                        .HasColumnType("int")
                        .HasColumnName("level_id");

                    b.HasKey("Id")
                        .IsClustered();

                    b.HasIndex("DysfunctionId");

                    b.HasIndex("LevelId");

                    b.ToTable("tbl_interpretations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DysfunctionId = 1,
                            LevelId = 1
                        },
                        new
                        {
                            Id = 2,
                            DysfunctionId = 1,
                            LevelId = 2
                        },
                        new
                        {
                            Id = 3,
                            DysfunctionId = 1,
                            LevelId = 3
                        },
                        new
                        {
                            Id = 4,
                            DysfunctionId = 2,
                            LevelId = 1
                        },
                        new
                        {
                            Id = 5,
                            DysfunctionId = 2,
                            LevelId = 2
                        },
                        new
                        {
                            Id = 6,
                            DysfunctionId = 2,
                            LevelId = 3
                        },
                        new
                        {
                            Id = 7,
                            DysfunctionId = 3,
                            LevelId = 1
                        },
                        new
                        {
                            Id = 8,
                            DysfunctionId = 3,
                            LevelId = 2
                        },
                        new
                        {
                            Id = 9,
                            DysfunctionId = 3,
                            LevelId = 3
                        },
                        new
                        {
                            Id = 10,
                            DysfunctionId = 4,
                            LevelId = 1
                        },
                        new
                        {
                            Id = 11,
                            DysfunctionId = 4,
                            LevelId = 2
                        },
                        new
                        {
                            Id = 12,
                            DysfunctionId = 4,
                            LevelId = 3
                        },
                        new
                        {
                            Id = 13,
                            DysfunctionId = 5,
                            LevelId = 1
                        },
                        new
                        {
                            Id = 14,
                            DysfunctionId = 5,
                            LevelId = 2
                        },
                        new
                        {
                            Id = 15,
                            DysfunctionId = 5,
                            LevelId = 3
                        });
                });

            modelBuilder.Entity("DAL.Models.InterpretationTranslation", b =>
                {
                    b.Property<int>("InterpretationId")
                        .HasColumnType("int")
                        .HasColumnName("interpretation_id");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("language_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("InterpretationId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("tbl_interpretation_translations");

                    b.HasData(
                        new
                        {
                            InterpretationId = 1,
                            LanguageId = 1,
                            Text = "Je team heeft een duidelijk gebrek aan de noodzakelijke openheid en kwetsbaarheid rond elkaars zwakheden, twijfels, fouten, uitdagingen en nood aan hulp die leden van elkaar verwachten om goed te kunnen samenwerken."
                        },
                        new
                        {
                            InterpretationId = 2,
                            LanguageId = 1,
                            Text = "Je team zou moeten leren om zich kwetsbaarder en opener op te stellen naar elkaar toe i.v.m. elkaars zwakheden, twijfels, fouten, uitdagingen en nood aan hulp."
                        },
                        new
                        {
                            InterpretationId = 3,
                            LanguageId = 1,
                            Text = "Je team heeft een omgeving gecreëerd waar kwetsbaarheid en openheid de norm zijn."
                        },
                        new
                        {
                            InterpretationId = 4,
                            LanguageId = 1,
                            Text = "Je team voelt zich niet comfortabel om conflicten te bespreken en houdt meningsverschillen voor zichzelf of misbruikt ze tegen elkaar."
                        },
                        new
                        {
                            InterpretationId = 5,
                            LanguageId = 1,
                            Text = "Je team zou moeten leren om conflicten sneller te bespreken en rond belangrijke meningsverschillen openlijk in discussie te gaan."
                        },
                        new
                        {
                            InterpretationId = 6,
                            LanguageId = 1,
                            Text = "Je team durft makkelijk conflicten bespreken en verschillende meningen uiten."
                        },
                        new
                        {
                            InterpretationId = 7,
                            LanguageId = 1,
                            Text = "Je team is niet in staat om zich volledig achter genomen beslissingen te scharen, waardoor dubbelzinnigheid en veronderstellingen eerder regel zijn dan uitzondering."
                        },
                        new
                        {
                            InterpretationId = 8,
                            LanguageId = 1,
                            Text = "Je team heeft het soms moeilijk om zich volledig achter genomen beslissingen te scharen, waardoor dubbelzinnigheid en veronderstellingen mogelijks de kop op steken."
                        },
                        new
                        {
                            InterpretationId = 9,
                            LanguageId = 1,
                            Text = "Je team is in staat om zich volledig achter genomen beslissingen te scharen, zodat dubbelzinnigheid en veronderstellingen geen kans krijgen."
                        },
                        new
                        {
                            InterpretationId = 10,
                            LanguageId = 1,
                            Text = "Je team aarzelt of vermijdt om elkaar aan te spreken op gemaakte afspraken, gedrag en prestatie."
                        },
                        new
                        {
                            InterpretationId = 11,
                            LanguageId = 1,
                            Text = "Je team aarzelt soms om elkaar aan te spreken op gemaakte afspraken, gedrag en prestatie."
                        },
                        new
                        {
                            InterpretationId = 12,
                            LanguageId = 1,
                            Text = "Je team aarzelt niet om elkaar aan te spreken op gemaakte afspraken, gedrag en prestatie."
                        },
                        new
                        {
                            InterpretationId = 13,
                            LanguageId = 1,
                            Text = "Je team hecht duidelijk te weinig waarde aan het collectieve resultaat en is vooral bezig met individueel gewin, erkenning en status."
                        },
                        new
                        {
                            InterpretationId = 14,
                            LanguageId = 1,
                            Text = "Je team hecht mogelijks teveel waarde aan individueel/departementeel gewin, erkenning en status in het nadeel van het collectieve resultaat."
                        },
                        new
                        {
                            InterpretationId = 15,
                            LanguageId = 1,
                            Text = "Je team schat het bereiken van het collectief resultaat hoger in dan het bereiken van individueel gewin, erkenning en status."
                        });
                });

            modelBuilder.Entity("DAL.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(3)")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .IsClustered();

                    b.HasIndex("Name", "Code")
                        .IsUnique();

                    b.ToTable("tbl_languages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "nl",
                            Name = "Nederlands"
                        },
                        new
                        {
                            Id = 2,
                            Code = "en",
                            Name = "English"
                        },
                        new
                        {
                            Id = 3,
                            Code = "fr",
                            Name = "Français"
                        });
                });

            modelBuilder.Entity("DAL.Models.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("char(7)")
                        .HasColumnName("color");

                    b.Property<decimal>("LowerLimit")
                        .HasColumnType("decimal(3,2)")
                        .HasColumnName("lower_limit");

                    b.Property<decimal>("UpperLimit")
                        .HasColumnType("decimal(3,2)")
                        .HasColumnName("upper_limit");

                    b.HasKey("Id")
                        .IsClustered();

                    b.ToTable("tbl_levels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#F95656",
                            LowerLimit = 1m,
                            UpperLimit = 3.24m
                        },
                        new
                        {
                            Id = 2,
                            Color = "#FFD54A",
                            LowerLimit = 3.25m,
                            UpperLimit = 3.74m
                        },
                        new
                        {
                            Id = 3,
                            Color = "#93EB5F",
                            LowerLimit = 3.75m,
                            UpperLimit = 5m
                        },
                        new
                        {
                            Id = 4,
                            Color = "#D8D8D8",
                            LowerLimit = 0m,
                            UpperLimit = 0m
                        });
                });

            modelBuilder.Entity("DAL.Models.LevelTranslation", b =>
                {
                    b.Property<int>("LevelId")
                        .HasColumnType("int")
                        .HasColumnName("level_id");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("language_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasColumnName("name");

                    b.HasKey("LevelId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("tbl_level_translations");

                    b.HasData(
                        new
                        {
                            LevelId = 1,
                            LanguageId = 1,
                            Name = "Laag"
                        },
                        new
                        {
                            LevelId = 2,
                            LanguageId = 1,
                            Name = "Gemiddeld"
                        },
                        new
                        {
                            LevelId = 3,
                            LanguageId = 1,
                            Name = "Hoog"
                        },
                        new
                        {
                            LevelId = 1,
                            LanguageId = 2,
                            Name = "Low"
                        },
                        new
                        {
                            LevelId = 2,
                            LanguageId = 2,
                            Name = "Medium"
                        },
                        new
                        {
                            LevelId = 3,
                            LanguageId = 2,
                            Name = "High"
                        });
                });

            modelBuilder.Entity("DAL.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DysfunctionId")
                        .HasColumnType("int")
                        .HasColumnName("dysfunction_id");

                    b.Property<byte>("Number")
                        .HasColumnType("tinyint")
                        .HasColumnName("number");

                    b.HasKey("Id")
                        .IsClustered();

                    b.HasIndex("DysfunctionId");

                    b.ToTable("tbl_questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DysfunctionId = 1,
                            Number = (byte)1
                        },
                        new
                        {
                            Id = 2,
                            DysfunctionId = 2,
                            Number = (byte)2
                        },
                        new
                        {
                            Id = 3,
                            DysfunctionId = 5,
                            Number = (byte)3
                        },
                        new
                        {
                            Id = 4,
                            DysfunctionId = 2,
                            Number = (byte)4
                        },
                        new
                        {
                            Id = 5,
                            DysfunctionId = 2,
                            Number = (byte)5
                        },
                        new
                        {
                            Id = 6,
                            DysfunctionId = 1,
                            Number = (byte)6
                        },
                        new
                        {
                            Id = 7,
                            DysfunctionId = 2,
                            Number = (byte)7
                        },
                        new
                        {
                            Id = 8,
                            DysfunctionId = 4,
                            Number = (byte)8
                        },
                        new
                        {
                            Id = 9,
                            DysfunctionId = 5,
                            Number = (byte)9
                        },
                        new
                        {
                            Id = 10,
                            DysfunctionId = 1,
                            Number = (byte)10
                        },
                        new
                        {
                            Id = 11,
                            DysfunctionId = 3,
                            Number = (byte)11
                        },
                        new
                        {
                            Id = 12,
                            DysfunctionId = 2,
                            Number = (byte)12
                        },
                        new
                        {
                            Id = 13,
                            DysfunctionId = 1,
                            Number = (byte)13
                        },
                        new
                        {
                            Id = 14,
                            DysfunctionId = 5,
                            Number = (byte)14
                        },
                        new
                        {
                            Id = 15,
                            DysfunctionId = 5,
                            Number = (byte)15
                        },
                        new
                        {
                            Id = 16,
                            DysfunctionId = 4,
                            Number = (byte)16
                        },
                        new
                        {
                            Id = 17,
                            DysfunctionId = 1,
                            Number = (byte)17
                        },
                        new
                        {
                            Id = 18,
                            DysfunctionId = 2,
                            Number = (byte)18
                        },
                        new
                        {
                            Id = 19,
                            DysfunctionId = 3,
                            Number = (byte)19
                        },
                        new
                        {
                            Id = 20,
                            DysfunctionId = 4,
                            Number = (byte)20
                        },
                        new
                        {
                            Id = 21,
                            DysfunctionId = 4,
                            Number = (byte)21
                        },
                        new
                        {
                            Id = 22,
                            DysfunctionId = 1,
                            Number = (byte)22
                        },
                        new
                        {
                            Id = 23,
                            DysfunctionId = 2,
                            Number = (byte)23
                        },
                        new
                        {
                            Id = 24,
                            DysfunctionId = 3,
                            Number = (byte)24
                        },
                        new
                        {
                            Id = 25,
                            DysfunctionId = 5,
                            Number = (byte)25
                        },
                        new
                        {
                            Id = 26,
                            DysfunctionId = 4,
                            Number = (byte)26
                        },
                        new
                        {
                            Id = 27,
                            DysfunctionId = 2,
                            Number = (byte)27
                        },
                        new
                        {
                            Id = 28,
                            DysfunctionId = 3,
                            Number = (byte)28
                        },
                        new
                        {
                            Id = 29,
                            DysfunctionId = 5,
                            Number = (byte)29
                        },
                        new
                        {
                            Id = 30,
                            DysfunctionId = 3,
                            Number = (byte)30
                        },
                        new
                        {
                            Id = 31,
                            DysfunctionId = 5,
                            Number = (byte)31
                        },
                        new
                        {
                            Id = 32,
                            DysfunctionId = 1,
                            Number = (byte)32
                        },
                        new
                        {
                            Id = 33,
                            DysfunctionId = 1,
                            Number = (byte)33
                        },
                        new
                        {
                            Id = 34,
                            DysfunctionId = 3,
                            Number = (byte)34
                        },
                        new
                        {
                            Id = 35,
                            DysfunctionId = 4,
                            Number = (byte)35
                        },
                        new
                        {
                            Id = 36,
                            DysfunctionId = 4,
                            Number = (byte)36
                        },
                        new
                        {
                            Id = 37,
                            DysfunctionId = 5,
                            Number = (byte)37
                        },
                        new
                        {
                            Id = 38,
                            DysfunctionId = 3,
                            Number = (byte)38
                        });
                });

            modelBuilder.Entity("DAL.Models.QuestionTranslation", b =>
                {
                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("question_id");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("language_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("QuestionId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("tbl_question_translations");

                    b.HasData(
                        new
                        {
                            QuestionId = 1,
                            LanguageId = 1,
                            Text = "Teamleden geven hun fouten toe."
                        },
                        new
                        {
                            QuestionId = 2,
                            LanguageId = 1,
                            Text = "Teamleden zijn gepassioneerd en open in het bespreken van hun uitdagingen."
                        },
                        new
                        {
                            QuestionId = 3,
                            LanguageId = 1,
                            Text = "Teamleden zijn snel in het benoemen van de bijdragen en de successen van de anderen."
                        },
                        new
                        {
                            QuestionId = 4,
                            LanguageId = 1,
                            Text = "Team vergaderingen zijn boeiend en inspirerend."
                        },
                        new
                        {
                            QuestionId = 5,
                            LanguageId = 1,
                            Text = "Tijdens team vergaderingen worden de belangrijkste en moeilijkste onderwerpen aangekaart."
                        },
                        new
                        {
                            QuestionId = 6,
                            LanguageId = 1,
                            Text = "Teamleden geven hun eigen zwakheden aan elkaar toe."
                        },
                        new
                        {
                            QuestionId = 7,
                            LanguageId = 1,
                            Text = "Teamleden durven hun mening zeggen, ook als het mogelijks tot onenigheid leidt."
                        },
                        new
                        {
                            QuestionId = 8,
                            LanguageId = 1,
                            Text = "Teamleden durven elkaar aanspreken op elkaars mindere prestaties."
                        },
                        new
                        {
                            QuestionId = 9,
                            LanguageId = 1,
                            Text = "Het team heeft een reputatie van hoge prestaties."
                        },
                        new
                        {
                            QuestionId = 10,
                            LanguageId = 1,
                            Text = "Teamleden vragen elkaar makkelijk om hulp."
                        },
                        new
                        {
                            QuestionId = 11,
                            LanguageId = 1,
                            Text = "Teamleden verlaten de team vergaderingen met de overtuiging dat iedereen volledig achter de genomen beslissingen staat."
                        },
                        new
                        {
                            QuestionId = 12,
                            LanguageId = 1,
                            Text = "Tijdens discussies vragen teamleden door over hoe ze tot hun mening en besluiten komen."
                        },
                        new
                        {
                            QuestionId = 13,
                            LanguageId = 1,
                            Text = "Teamleden vragen snel en makkelijk naar input over hun verantwoordelijkheidsdomein."
                        },
                        new
                        {
                            QuestionId = 14,
                            LanguageId = 1,
                            Text = "Als het team zijn collectieve resultaten niet haalt gaat elk teamlid spontaan zijn verantwoordelijkheid opnemen om het algemene teamresultaat te verbeteren."
                        },
                        new
                        {
                            QuestionId = 15,
                            LanguageId = 1,
                            Text = "Teamleden doen gemakkelijk toegevingen in hun eigen verantwoordelijkheidsgebied ten gunste van de goede werking van het team."
                        },
                        new
                        {
                            QuestionId = 16,
                            LanguageId = 1,
                            Text = "Teamleden zijn snel met het elkaar confronteren van problemen in mekaars verantwoordelijkheidsdomeinen."
                        },
                        new
                        {
                            QuestionId = 17,
                            LanguageId = 1,
                            Text = "Teamleden (h)erkennen en maken gebruik van elkaars competenties en ervaring."
                        },
                        new
                        {
                            QuestionId = 18,
                            LanguageId = 1,
                            Text = "Teamleden vragen actief naar elkaars meningen tijdens vergaderingen."
                        },
                        new
                        {
                            QuestionId = 19,
                            LanguageId = 1,
                            Text = "Teamleden eindigen discussies en vergaderingen altijd met duidelijke, eenduidige en specifieke besluiten en actiepunten."
                        },
                        new
                        {
                            QuestionId = 20,
                            LanguageId = 1,
                            Text = "Teamleden bevragen elkaar rond hun huidige manieren van werken en gebruikte methoden(‘best practices’)."
                        },
                        new
                        {
                            QuestionId = 21,
                            LanguageId = 1,
                            Text = "Het team zorgt ervoor dat de minder presterende teamleden extra druk en een verhoogde verwachting tot presteren voelen."
                        },
                        new
                        {
                            QuestionId = 22,
                            LanguageId = 1,
                            Text = "Teamleden gaan zich spontaan verontschuldigen naar elkaar toe."
                        },
                        new
                        {
                            QuestionId = 23,
                            LanguageId = 1,
                            Text = "Teamleden communiceren makkelijk onpopulaire meningen in de groep."
                        },
                        new
                        {
                            QuestionId = 24,
                            LanguageId = 1,
                            Text = "In het team is het duidelijk welke de prioriteiten zijn en welke richting men uit wil."
                        },
                        new
                        {
                            QuestionId = 25,
                            LanguageId = 1,
                            Text = "Teamleden gaan eerder op zoek naar waardering en erkenning voor de teamprestaties dan voor hun persoonlijke prestaties."
                        },
                        new
                        {
                            QuestionId = 26,
                            LanguageId = 1,
                            Text = "Alle leden van het team hebben dezelfde hoge kwaliteitsnormen over hun werk."
                        },
                        new
                        {
                            QuestionId = 27,
                            LanguageId = 1,
                            Text = "Als er zich een conflict voordoet gaat het team dat eerst oplossen alvorens een ander onderwerp aan te pakken."
                        },
                        new
                        {
                            QuestionId = 28,
                            LanguageId = 1,
                            Text = "Het team heeft gezamenlijke doelstellingen en heeft de neus in dezelfde richting."
                        },
                        new
                        {
                            QuestionId = 29,
                            LanguageId = 1,
                            Text = "Het team bereikt consistent zijn doelstellingen."
                        },
                        new
                        {
                            QuestionId = 30,
                            LanguageId = 1,
                            Text = "Het team neemt makkelijk beslissingen, zelfs als niet alle informatie voor handen is."
                        },
                        new
                        {
                            QuestionId = 31,
                            LanguageId = 1,
                            Text = "Teamleden waarderen collectief succes hoger dan individuele prestaties."
                        },
                        new
                        {
                            QuestionId = 32,
                            LanguageId = 1,
                            Text = "Teamleden zijn onbevooroordeeld en oprecht met elkaar."
                        },
                        new
                        {
                            QuestionId = 33,
                            LanguageId = 1,
                            Text = "Teamleden kunnen makkelijk en spontaan privé zaken met elkaar bespreken."
                        },
                        new
                        {
                            QuestionId = 34,
                            LanguageId = 1,
                            Text = "Het team houdt zich aan genomen beslissingen."
                        },
                        new
                        {
                            QuestionId = 35,
                            LanguageId = 1,
                            Text = "Teamleden houden steeds aan hun beloften en afspraken naar elkaar."
                        },
                        new
                        {
                            QuestionId = 36,
                            LanguageId = 1,
                            Text = "eden geven elkaar eerlijke, constructieve en niet manipulerende feedback aan elkaar."
                        },
                        new
                        {
                            QuestionId = 37,
                            LanguageId = 1,
                            Text = "Teamleden hechten weinig belang aan titels, status en aanzien."
                        },
                        new
                        {
                            QuestionId = 38,
                            LanguageId = 1,
                            Text = "Teamleden steunen groepsbeslissingen, zelfs als dat indruist tegen hun eigen persoonlijke mening."
                        });
                });

            modelBuilder.Entity("DAL.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayLabel")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasColumnName("display_label");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("tbl_roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayLabel = "Teamleader",
                            Name = "Teamleader"
                        });
                });

            modelBuilder.Entity("DAL.Models.RoleTranslation", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("language_id");

                    b.Property<string>("Translation")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasColumnName("translation");

                    b.HasKey("RoleId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("tbl_role_translations");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            LanguageId = 1,
                            Translation = "Teamleider"
                        });
                });

            modelBuilder.Entity("DAL.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsTeamscanActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_teamscan_active");

                    b.Property<DateTime?>("LastTeamScan")
                        .HasColumnType("date")
                        .HasColumnName("last_teamscan");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("TeamleaderId")
                        .HasColumnType("int")
                        .HasColumnName("teamleader_id");

                    b.HasKey("Id")
                        .IsClustered();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("TeamleaderId");

                    b.ToTable("tbl_teams");
                });

            modelBuilder.Entity("DAL.Models.TeamMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("varchar(70)")
                        .HasColumnName("firstname");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("varchar(70)")
                        .HasColumnName("lastname");

                    b.Property<int>("TeamId")
                        .HasColumnType("int")
                        .HasColumnName("team_id");

                    b.HasKey("Id")
                        .IsClustered();

                    b.HasIndex("TeamId", "Email")
                        .IsUnique();

                    b.ToTable("tbl_teammembers");
                });

            modelBuilder.Entity("DAL.Models.Teamscan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<int>("Number")
                        .HasColumnType("int")
                        .HasColumnName("number");

                    b.Property<decimal>("ScoreAccountability")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(3,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("score_accountability");

                    b.Property<decimal>("ScoreCommitment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(3,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("score_commitment");

                    b.Property<decimal>("ScoreConflict")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(3,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("score_conflict");

                    b.Property<decimal>("ScoreResults")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(3,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("score_results");

                    b.Property<decimal>("ScoreTrust")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(3,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("score_trust");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<int>("StartedById")
                        .HasColumnType("int")
                        .HasColumnName("startedby_id");

                    b.Property<int>("TeamId")
                        .HasColumnType("int")
                        .HasColumnName("team_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .IsClustered();

                    b.HasIndex("StartedById");

                    b.HasIndex("TeamId", "Title", "Number")
                        .IsUnique();

                    b.ToTable("tbl_teamscans");
                });

            modelBuilder.Entity("DAL.Models.TeamscanMember", b =>
                {
                    b.Property<int>("TeamMemberId")
                        .HasColumnType("int")
                        .HasColumnName("teammember_id");

                    b.Property<int>("TeamscanId")
                        .HasColumnType("int")
                        .HasColumnName("teamscan_id");

                    b.Property<bool>("HasAnswered")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("has_answered");

                    b.HasKey("TeamMemberId", "TeamscanId");

                    b.HasIndex("TeamscanId");

                    b.ToTable("tbl_teamscan_members");
                });

            modelBuilder.Entity("DAL.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("varchar(70)")
                        .HasColumnName("firstname");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("varchar(70)")
                        .HasColumnName("lastname");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("PreferredLanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("preferred_language_id");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PreferredLanguageId");

                    b.ToTable("tbl_users");
                });

            modelBuilder.Entity("DAL.Models.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("tbl_user_roles");
                });

            modelBuilder.Entity("DAL.Models.DysfunctionTranslation", b =>
                {
                    b.HasOne("DAL.Models.Dysfunction", "Dysfunction")
                        .WithMany()
                        .HasForeignKey("DysfunctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dysfunction");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("DAL.Models.IndividualScore", b =>
                {
                    b.HasOne("DAL.Models.TeamMember", "TeamMember")
                        .WithMany()
                        .HasForeignKey("TeamMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Teamscan", "Teamscan")
                        .WithMany()
                        .HasForeignKey("TeamscanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TeamMember");

                    b.Navigation("Teamscan");
                });

            modelBuilder.Entity("DAL.Models.Interpretation", b =>
                {
                    b.HasOne("DAL.Models.Dysfunction", "Dysfunction")
                        .WithMany()
                        .HasForeignKey("DysfunctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Level", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dysfunction");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("DAL.Models.InterpretationTranslation", b =>
                {
                    b.HasOne("DAL.Models.Interpretation", "Interpretation")
                        .WithMany()
                        .HasForeignKey("InterpretationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interpretation");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("DAL.Models.LevelTranslation", b =>
                {
                    b.HasOne("DAL.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Level", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("DAL.Models.Question", b =>
                {
                    b.HasOne("DAL.Models.Dysfunction", "Dysfunction")
                        .WithMany()
                        .HasForeignKey("DysfunctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dysfunction");
                });

            modelBuilder.Entity("DAL.Models.QuestionTranslation", b =>
                {
                    b.HasOne("DAL.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("DAL.Models.RoleTranslation", b =>
                {
                    b.HasOne("DAL.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DAL.Models.Team", b =>
                {
                    b.HasOne("DAL.Models.User", "Teamleader")
                        .WithMany()
                        .HasForeignKey("TeamleaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teamleader");
                });

            modelBuilder.Entity("DAL.Models.TeamMember", b =>
                {
                    b.HasOne("DAL.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("DAL.Models.Teamscan", b =>
                {
                    b.HasOne("DAL.Models.User", "StartedBy")
                        .WithMany()
                        .HasForeignKey("StartedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DAL.Models.Team", "Team")
                        .WithMany("Teamscans")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StartedBy");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("DAL.Models.TeamscanMember", b =>
                {
                    b.HasOne("DAL.Models.TeamMember", "TeamMember")
                        .WithMany()
                        .HasForeignKey("TeamMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Teamscan", "Teamscan")
                        .WithMany()
                        .HasForeignKey("TeamscanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TeamMember");

                    b.Navigation("Teamscan");
                });

            modelBuilder.Entity("DAL.Models.User", b =>
                {
                    b.HasOne("DAL.Models.Language", "PreferredLanguage")
                        .WithMany()
                        .HasForeignKey("PreferredLanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PreferredLanguage");
                });

            modelBuilder.Entity("DAL.Models.UserRole", b =>
                {
                    b.HasOne("DAL.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.Team", b =>
                {
                    b.Navigation("Teamscans");
                });
#pragma warning restore 612, 618
        }
    }
}
